
participant Game
participant Board
participant Piece

Game->Board:move_an(input)
activate Board
note over Board:- convert AN coordinates to XY\n- call move_yx\n- return whatever move_yx returns
Game<--Board:result
deactivate Board

Board->Board:move_yx(source, destination)
activate Board
note over Board:- return 'invalid' if source piece \n  does not match active color or if\n  source cell is empty\n- return 'invalid' if destination \n  is not contained in moveable_destinations\n- store captured opponent piece if destination \n  contains a piece that doesn't match active \n  color\n- set destination cell = source\n- clear source cell\n- store captured pawn if en_passant? returns true\n- move rook if castling? returns true\n- update history\n- Return 1 if successful move, nil if otherwise\n
Board->Piece:moveable_destinations?(self)
activate Piece
Board<--Piece:moveable_destinations
deactivate Piece
deactivate Board

space

Board->Board:undo_last_move
activate Board
note over Board:- undo the last move if it was\n  a castling move\n- undo the last move if it was\n  an en passant move\n- undo the last move if it was\n  a normal move\n- clear the last move in history
space
deactivate Board

space

Board->Board:place(location, input)
activate Board
note over Board:- set the given grid location\n  to the given input
space

deactivate Board

space

Board->Board:an_to_yx(input)
activate Board
note over Board:- convert the given algebraic\n  coordinates to yx coordinates
space
deactivate Board

space

Board->Board:yx_to_an(input)
activate Board
note over Board:- convert the given yx coordinates\n  to algebraic coordinates
space
deactivate Board

space

Game->Board:promotion?
activate Board
note over Board:- return true if most recent move involved\n  a pawn reaching the other side of the \n  board
Game<--Board:
deactivate Board

space

Game->Board:promote(selection)
activate Board
note over Board:- call create_piece(selection)\n- get pawn position that matches\n  most recent move\n- replace him with result of \n  create_piece\n- possibly return a message 
Game<--Board:result(TBD)
deactivate Board

space

Game->Board: checkmate?
activate Board
note over Board:- get moveable_destinations for all \n  pieces of active color\n- run removes_check? for \n  each\n- return true if removes_check?\n  returns false for all
Game<--Board:
deactivate Board

space

Game->Board:stalemate?
activate Board
note over Board:- return true if active color is not\n  in check, and if all allied pieces \n  return no moveable_destinations. 
deactivate Board
Game<--Board:

space

Piece->Board:disables_check?(source, destination)
activate Board
note over Board:- result = false\n- call move_yx\n- result = true if active_color_in_check? returns false\n- call undo_last_move\n- return result
Piece<--Board:
deactivate Board

space

Piece->Board:enables_check?(source, destination)
activate Board
note over Board:- result = false\n- call move_yx\n- call the move function\n- result = true if active_color_in_check? returns true\n- call undo_last_move\n- return result
Piece<--Board:
deactivate Board

space

Game->Board:swap_active_color
activate Board
note over Board:- if white, change to black\n- if black, change to white
space
deactivate Board

space

Game->Board:formatted
activate Board
note over Board:- return the board formatted\n  as a string
Game<--Board:
deactivate Board

space

Game->Board:formatted_history
activate Board
note over Board:- return the board history formatted\n  as a string
Game<--Board:
deactivate Board

space

Piece->Board:active_color_in_check?
activate Board
note over Board:- returns true if the active color's king's \n  position can be reached by any enemy pieces
Piece<--Board:
deactivate Board

space

Piece->Board:enemy_pieces(color)
activate Board
note over Board:Returns array of all pieces\non the board that don't match \nthe given color
Piece<--Board:
deactivate Board

space

Piece->Board:allied_pieces(color)
activate Board
note over Board:Returns array of all pieces\non the board that match \nthe given color
Piece<--Board:
deactivate Board

space

Piece->Board:location(piece)
activate Board
note over Board:Returns the position on \nthe board for a given\npiece 
Piece<--Board:
deactivate Board

Piece->Board:valid_location?(position)
activate Board
note over Board:- Returns true if the position \n  exists on the board\n- Returns false if out of \n  bounds
Piece<--Board:
deactivate Board

space

Piece->Board:contents(position)
activate Board
note over Board:- Returns contents of cell
Piece<--Board:
deactivate Board





